# Chapter 1: What is Angular?

Welcome to this book on Getting Started with Angular 8. Throughout this book, we will be exploring Angular 8 and how to get started building applications with Angular. We will be looking at topics such as how to set up an Angular application and how to use the tools the Angular team provide to begin developing an Angular application. We will look at the architecture of a typical Angular application and how components and modules are used to build sections of the app. We will explore ways data is accessed and passed in an app and what mechanisms Angular provides for managing data.

We will also look at more advanced topics, such as observables and RxJS, testing, and packaging an application for production. We will even take a look at the NgRx, which is a library for managing state.

In this chapter, we will introduce Angular, what it is, and the reasons it is an ideal choice for web application development, as well as go through the features of Angular and what's in the latest release, version 8.

I will also introduce the demo application we are going to be building throughout the book. So, to recap, in this chapter, we will cover the following topics:
- Why are we looking at Angular?
- What is Angular?
- Some examples of the types of applications that can be built with Angular
- The history of Angular, how it was started, and what problems it aimed to solve What are the new features of Angular 8
- What is the demo application we will be building throughout this book

## What is Angular?
According to the official Angular docs, Angular is a platform that makes it easy to build applications with the web. Awesome, but what does that actually mean? Well, Angular is a web application framework that helps developers build web applications, web applications that can run on all platforms, from desktop and mobile, which makes Angular an ideal choice for your next web application.

The official documentation goes on to describe Angular as, *[combining] declarative templates, dependency injection, end-to-end tooling, and integrated best practices to solve development challenges. Angular empowers developers to build applications that live on the web, mobile, or the desktop*. This perfectly describes what Angular is. Through templates, dependency injection, and end-to-end tooling, Angular empowers developers to build web applications and applications that are built on best practices.

## Some examples of the type of projects built with Angular
By learning Angular, you can build many different types of applications, using the one framework. For example, you can build a complete web application, such as the **Google Grab and Go** program, where enterprise companies can manage their usage of Chromebooks.

*Google announced the Grab and Go program for Chromebooks, powered by Angular at the following URL: [https:/​/​blog.​angular.​io/​google- announces-​grab-​and-​go-​program-​for-​chromebooks-​powered-​by-angular-​7954c11900bd.](https:/​/​blog.​angular.​io/​google- announces-​grab-​and-​go-​program-​for-​chromebooks-​powered-​by-angular-​7954c11900bd)*

If you ever wanted to build an email client, you can in Angular. There is already a project called **ProtonMail**, which is a full-featured email client developed by scientists and engineers from CERN, written in Angular.

You can also build desktop applications in Angular. Working along with Electron *(Electron | Build cross-platform desktop apps with JavaScript, HTML, and CSS)*, the Node-based framework for building cross-platform desktop apps, you can use Angular as the framework to structure your code while letting Electron manage the running of the application on the desktop. A great example of this type of project is Nrwl's **Angular Console** application, which provides Angular developers with a UI in order to work with the Angular CLI (more on the CLI later).

And, of course, there is mobile; through using projects such as Angular Material, you can create Angular applications that are designed to look exactly like native mobile applications, (especially if you are building for Android). Now, while Angular will allow you to create a web application that looks and acts like it will run as a native application, Angular doesn't solve the problem of how to install the project as a native mobile application, along with the full native support of the phone's features. That's where a project like Ionic comes in. But, as you can see, a developer who knows how to write Angular applications has a lot of variety for the projects they can build.

## Angular's history
The history of Angular is an interesting one; first, there was AngularJS, and then came Angular. AngularJS was created as part of an internal project within Google by Misko Hevery. He created the first version of the project to make it easier for the designers within his team to build web applications.

Misko wanted a way to extend the vocabulary of HTML in order for the designers to use HTML tags that were more relevant to what they were designing. So, over a long weekend, yes, that's a weekend, Misko came up with the first version of AngularJS. The name Angular came from the angled brackets that are at the beginning and the end of an HTML tag.

Brad Green, Misko's team leader at the time, asked Misko to work on a project called the Google Feedback Tool, which was written in **Google Web Kit (GWT)**, a Java-based framework. But, after six months working on the project with GWT, the team found that it was extremely difficult to work with. So, Misko said that he could rewrite the Feedback Tool project in two weeks using his side project, AngularJS. Unfortunately, he took three weeks to complete the project, but he reduced the number of lines of code down to 1,500 from the 17,000, which is the amount the old GWT version had. And all this in three weeks as a solo developer!

Brad was obviously impressed, so he asked other developers to help Misko to work further on Angular; Igor Minor (who still works on Angular along with Misko) and Shyam Seshadri both helped Misko to complete the rewrite of the Google Feedback Tool and develop AngularJS further.

The next project the team worked on with AngularJS was the DoubleClick application that Google had just purchased. The team was challenged to create a new landing page for DoubleClick; first, they tried using GWT, but, after a two-week struggle, they turned to AngularJS, which Misko had been promoting within Google. They were able to complete the landing page project within two days using AngularJS. As a result of this success, the DoubleClick team decided to use AngularJS. With this, the first version of AngularJS was released in May 2011.

But this is all about AngularJS; we're not looking at the previous version. We're interested in the latest version of Angular, its second iteration. This new version of Angular came out in September 2016, after two and a half years of development, which shows how much thought has gone into the new version.

## Why use Angular?
Why should a developer decide to learn Angular? Well, there are several reasons, but the main reason is so they can create applications for all platforms: desktop, mobile, and the web. All these platforms are reachable for a developer who knows how to write Angular applications.

There are other similar technologies out there; for example, there are many JavaScript frameworks like Angular, but Angular is extremely well established and supported by Google. It is an ideal frontend framework for enterprise-level application, with all the out-of-the-box features that come with Angular (including modules, classes, components, and unit testing), All of these are extremely important to enterprises wanting their teams to develop well structured, tested applications; applications that are going to work the first time for their clients.

There is also a huge ecosystem around Angular; teams such as Nrwl with their Nx Extensions, which allow teams to create libraries to support the large enterprise-level applications that Nrwl specialises in. There is also a vast amount of training resources available to an Angular developer; companies such as Plurasight, EggHead, and Ultimate Angular all have in-depth courses for Angular development.

There are a large number of reasons why we should use Angular as our web application framework of choice. Let's look at these reasons.

### Supported by Google
One of the main reasons to use Angular is because it is supported by Google. They don't just sponsor the development of Angular, they are the team behind the development of Angular; Unlike other frameworks, which are supported by open source developers who work on fixing issues and creating new features for a framework in their spare time, Angular has a full-time team constantly working on supporting Angular.

Google has also provided a **Long Term Support (LTS)** plan for Angular, which shows that they plan to support older versions of Angular for the next few years. In this LTS, we can see what versions of Angular they provide support for and when older versions will no longer be supported. With Google being so transparent in terms of their support of Angular, we can be sure that it has a long future. This is extremely important for large businesses looking to select the framework they are going to invest in for their next large-scale project. Being able to see that Angular has the support of a large organisation like Google, and that there is an LTS plan, which shows that Angular will be supported for the long term, makes the decision to pick Angular as their framework of choice a straightforward one.

See the release dates from the official Angular website: [https:/​/​angular.io/​guide/​releases.](https:/​/​angular.io/​guide/​releases)

### Built on TypeScript
Angular is built on TypeScript, a superset of JavaScript, from Microsoft. TypeScript brings so many benefits, including Type interfaces and static typing. When we create objects and variables within our code through static typing, the details of these types are known when we compile our code and this helps to provide insight. So, bugs can be found at compile time instead of runtime. Not only does TypeScript help us write better code, but it also allows tools such as VSCode to provide IntelliSense of our code, which gives us better navigation, refactoring, and autocompletion, making the experience of writing TypeScript far more enjoyable than JavaScript.

Along with providing a great development experience, as a result of using TypeScript, we have access to all the ES2016/ES2017 features that aren't yet available in JavaScript. TypeScript can provide features that are still to be released in JavaScript. Being able to compile down to ES2015 (the version of JavaScript that the browser understands), TypeScript can provide these latest features and still be able to generate ES2015 code.

So, being built on TypeScript, Angular has access to all the latest features of the language and all the fantastic tooling TypeScript provides.

### The Angular CLI
Another great reason for using Angular is the Angular CLI; this is a command-line tool provided by the Angular team that helps us to build and run Angular projects. The CLI comes with a wide range of features, including the following:
- Creating the start of a project
- Creates components, services, directives, and other files using a simple command
- Runs the application in the browser
- Reloads the application after each saved change so that the latest version is displayed in the browser
- It can update a project's dependencies (other libraries used in a project) automatically
- It can add new libraries to the project
- It can run all the unit tests in a project and the end-to-end tests

The Angular CLI is a great tool, and you'll see as we proceed that learning Angular 8 is an important part of developing Angular applications. Many other frontend frameworks don't have CLIs, and those that do, they do not have the features of the Angular CLI.

> **Command-Line Interface (CLI)** is a way of writing commands to the computer via a Terminal window.

### Built on best practices
Angular is designed with best practices in mind. Any code generated by the CLI follows these best practices, as set out by the team from Google. By following the approach prescribed by the Angular team on how to write an Angular application, you know that the application you are building is using the best practices of modern web applications.

These best practices include the following:
- Component-based architecture 
- Modularised structure 
- Dependency injection
- Testing
- Readable code
- Ease of maintenance

Being built on a set of best practices means that you know the architecture of your application is built on the basis of these good practices.

### Testing is a first-class citizen of Angular
Testing is an extremely important part of creating bug-free applications. Angular supports testing straight out of the box. Whenever the CLI creates a new Component or Service, it automatically creates a Test Spec file for the new Component or Service. The CLI can also run the tests. No longer do we have to set up test runner files; all of this is automatically managed by the CLI.

Making writing tests and running tests are so easy, so there is no reason not to have a good set of tests for your application. Angular actively encourages writing tests, and by doing this, it reduces bugs and issues that an end user may find, thereby making Angular an ideal choice for large-scale enterprise level applications.

### The Angular community
Another great reason for choosing Angular as your framework of choice is the community that has grown around Angular. There are over 100,000 Angular developers, a number that is still growing. There are Angular meetups all around the world, where you can go and meet other Angular developers to discuss their experiences with using Angular and you can learn from them.

There are also many conferences you can attend as an Angular developer to learn about the new features of Angular and hear talks on different approaches to working with Angular. These conferences are all over the world, and attended by the Angular team, so you can put your questions to the team directly.

Not only are there conferences and meetups you can attend to learn about Angular, but there are also so many online resources created by members of the Angular community that we can access to learn about Angular. There are sites such as Ultimate Courses ([https:/​/ ultimatecourses.​com/​courses/​angular](https:/​/ ultimatecourses.​com/​courses/​angular)) who provide courses on Angular and TypeScript. 

There are also podcasts where you hear interviews with leaders of the Angular community, including the Angular team. Podcasts such as *Adventures in Angular* and *EggHead.io* provide great interviews with Angular developers.

### Access to third-party libraries
The Angular community, as well as allowing us to learn from one another, is also active in building libraries and tools that work with Angular. Libraries such as NgRx, NGXS, and MobX all provide solutions on how to manage state within an Angular application (NgRx is something we will explore in Chapter 9, *State Management and NgRx*). There are also UI libraries such as Angular Material, NGX-Bootstrap, and Nebular, which provide UI components you can add to your Angular applications.

There are libraries for accessing data from cloud-based systems, such as Firebase. So, if your application needs to connect to an existing Firebase application, there are libraries you can add that simplify working with Firebase in your application. You can also find libraries that facilitate working with GraphQL if that's how your team creates their APIs.

If you want to add tools to your Angular workflow, the Angular community has provided tools like Augury ([https:/​/​augury.​rangle.​io](https:/​/​augury.​rangle.​io)) from Rangle.io, which is a plugin for Chrome for debugging Angular applications.

Another great tool from the Angular community is the NX workspaces from Nrwl. They have created an extension to the Angular CLI that helps to create large enterprise Angular applications, where teams of developers work on the same project. The NX tool helps the CLI create libraries within Angular projects so that large-scale teams can share code across teams.

> To see the types of extra resources available for Angular, look at the Resources list on the Angular website: [https:/​/​angular.​io/​resources.](https:/​/​angular.​io/​resources.)

As you can see, there are so many reasons to use Angular. We're already on version 8, which shows that the Angular team aren't slowing down in terms of making Angular better and better. Let's now go through some of the recent features of Angular and see what's new in Angular 8.

